/*
 * clients-data-service-test
 * Тестовый API
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package ru.softlab.zikova.efr.api;

import ru.softlab.zikova.efr.exchange.model.Client;
import ru.softlab.zikova.efr.exchange.model.PublicModelFormatter;
import org.springframework.core.annotation.Order;
import org.springframework.core.Ordered;
import ru.softlab.efr.infrastructure.logging.api.model.OperationLogEntry;
import ru.softlab.efr.infrastructure.logging.api.model.OperationMode;
import ru.softlab.efr.infrastructure.logging.api.model.OperationState;
import ru.softlab.efr.infrastructure.logging.api.services.OperationLogService;

import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.*;
import org.springframework.validation.*;
import org.springframework.data.web.*;
import org.springframework.data.domain.*;

import java.util.*;

import org.springframework.validation.annotation.*;
import javax.validation.constraints.*;
import javax.validation.*;

/**
 * Содержит эндпоинты приложения 'Тестовый API'
 * Клиенты
 */
@SuppressWarnings("all")
@RestController
public class ClientsApi {
    public static final String CREATE_CLIENT_PATH = "/clients/newClient";
    public static final String DELETE_CLIENTS_PATH = "/clients/{clientId}/delete";
    public static final String GET_ALL_CLIENT_PATH = "/clients/all_clients";
    public static final String GET_CLIENT_BY_ID_PATH = "/clients/{clientId}";
    public static final String UPDATE_CLIENT_PATH = "/clients/{clientId}/update";

    private static final long LOG_TYPE_ID = 10;

    private final Delegate delegate;
    private final OperationLogService operationLogService;

    /**
     * Конструктор
     *
     * @param delegate эффективная реализации контроллера
     * @param operationLogService сервис логирования
     */
    public ClientsApi(Delegate delegate, OperationLogService operationLogService) {
        this.delegate = delegate;
        this.operationLogService = operationLogService;
    }

    /**
     * Создание нового клиента
     *
     * @param client Данные клиента необходимые для создания
     * @param bindingResult информация о валидности входящих данных
     * @return Экземпляр класса {@link ResponseEntity}
     * @throws Exception исключение, выбрасываемое в случае ошибок при выполнении метода
     */
    @RequestMapping(value = CREATE_CLIENT_PATH,
            method = RequestMethod.POST)
    public ResponseEntity<Client> createClient(@Valid @RequestBody Client client, BindingResult bindingResult) throws Exception {
        OperationLogEntry operationLogEntry = operationLogService.startLogging(LOG_TYPE_ID);
        operationLogEntry.setLogTypeName("Обработка запроса сервисом " + operationLogEntry.getLoggingSystem());
        operationLogEntry.setOperationKey(CREATE_CLIENT_PATH);
        operationLogEntry.setOperationDescription("Создание нового клиента");
        operationLogEntry.setOperationMode(OperationMode.ACTIVE);
        operationLogEntry.setOperationParameter("Данные клиента необходимые для создания", PublicModelFormatter.format(client));
        if (bindingResult.hasErrors()) {
            operationLogEntry.setOperationState(OperationState.CLIENT_ERROR);
            writeLog(operationLogEntry);
            throw new BindException(bindingResult);
        }
        try {
            ResponseEntity<Client> responseEntity = delegate.createClient(client);
            operationLogEntry.setOperationState(getOperationState(responseEntity));
            return responseEntity;
        } catch (Exception e) {
            operationLogEntry.setOperationState(OperationState.SYSTEM_ERROR);
            throw e;
        } finally {
            writeLog(operationLogEntry);
        }
    }

    /**
     * Удаление клиента
     *
     * @param clientId Удаление клиента по id
     * @return Экземпляр класса {@link ResponseEntity}
     * @throws Exception исключение, выбрасываемое в случае ошибок при выполнении метода
     */
    @RequestMapping(value = DELETE_CLIENTS_PATH,
            method = RequestMethod.DELETE)
    public ResponseEntity<String> deleteClients(@PathVariable("clientId") String clientId) throws Exception {
        OperationLogEntry operationLogEntry = operationLogService.startLogging(LOG_TYPE_ID);
        operationLogEntry.setLogTypeName("Обработка запроса сервисом " + operationLogEntry.getLoggingSystem());
        operationLogEntry.setOperationKey(DELETE_CLIENTS_PATH);
        operationLogEntry.setOperationDescription("Удаление клиента");
        operationLogEntry.setOperationMode(OperationMode.ACTIVE);
        operationLogEntry.setOperationParameter("Удаление клиента по id", PublicModelFormatter.format(clientId));
        try {
            ResponseEntity<String> responseEntity = delegate.deleteClients(clientId);
            operationLogEntry.setOperationState(getOperationState(responseEntity));
            return responseEntity;
        } catch (Exception e) {
            operationLogEntry.setOperationState(OperationState.SYSTEM_ERROR);
            throw e;
        } finally {
            writeLog(operationLogEntry);
        }
    }

    /**
     * Получение всех клиентов
     *
     * @param pageable параметры пагинации
     * @return Экземпляр класса {@link ResponseEntity}
     * @throws Exception исключение, выбрасываемое в случае ошибок при выполнении метода
     */
    @RequestMapping(value = GET_ALL_CLIENT_PATH,
            method = RequestMethod.GET)
    public ResponseEntity<Page<Client>> getAllClient(@PageableDefault(value = 50) Pageable pageable) throws Exception {
        OperationLogEntry operationLogEntry = operationLogService.startLogging(LOG_TYPE_ID);
        operationLogEntry.setLogTypeName("Обработка запроса сервисом " + operationLogEntry.getLoggingSystem());
        operationLogEntry.setOperationKey(GET_ALL_CLIENT_PATH);
        operationLogEntry.setOperationDescription("Получение всех клиентов");
        operationLogEntry.setOperationMode(OperationMode.PASSIVE);
        operationLogEntry.setOperationParameter("параметры пагинации", PublicModelFormatter.format(pageable));
        try {
            ResponseEntity<Page<Client>> responseEntity = delegate.getAllClient(pageable);
            operationLogEntry.setOperationState(getOperationState(responseEntity));
            return responseEntity;
        } catch (Exception e) {
            operationLogEntry.setOperationState(OperationState.SYSTEM_ERROR);
            throw e;
        } finally {
            writeLog(operationLogEntry);
        }
    }

    /**
     * Получение клиента по id
     *
     * @param clientId Идентификатор клиента
     * @return Экземпляр класса {@link ResponseEntity}
     * @throws Exception исключение, выбрасываемое в случае ошибок при выполнении метода
     */
    @RequestMapping(value = GET_CLIENT_BY_ID_PATH,
            method = RequestMethod.GET)
    public ResponseEntity<Client> getClientById(@PathVariable("clientId") String clientId) throws Exception {
        OperationLogEntry operationLogEntry = operationLogService.startLogging(LOG_TYPE_ID);
        operationLogEntry.setLogTypeName("Обработка запроса сервисом " + operationLogEntry.getLoggingSystem());
        operationLogEntry.setOperationKey(GET_CLIENT_BY_ID_PATH);
        operationLogEntry.setOperationDescription("Получение клиента по id");
        operationLogEntry.setOperationMode(OperationMode.PASSIVE);
        operationLogEntry.setOperationParameter("Идентификатор клиента", PublicModelFormatter.format(clientId));
        try {
            ResponseEntity<Client> responseEntity = delegate.getClientById(clientId);
            operationLogEntry.setOperationState(getOperationState(responseEntity));
            return responseEntity;
        } catch (Exception e) {
            operationLogEntry.setOperationState(OperationState.SYSTEM_ERROR);
            throw e;
        } finally {
            writeLog(operationLogEntry);
        }
    }

    /**
     * Редактирование клиента
     *
     * @param toUpdateInformation Новые данные
     * @param bindingResult информация о валидности входящих данных
     * @return Экземпляр класса {@link ResponseEntity}
     * @throws Exception исключение, выбрасываемое в случае ошибок при выполнении метода
     */
    @RequestMapping(value = UPDATE_CLIENT_PATH,
            method = RequestMethod.PUT)
    public ResponseEntity<Client> updateClient(@Valid @RequestBody Client toUpdateInformation, BindingResult bindingResult) throws Exception {
        OperationLogEntry operationLogEntry = operationLogService.startLogging(LOG_TYPE_ID);
        operationLogEntry.setLogTypeName("Обработка запроса сервисом " + operationLogEntry.getLoggingSystem());
        operationLogEntry.setOperationKey(UPDATE_CLIENT_PATH);
        operationLogEntry.setOperationDescription("Редактирование клиента");
        operationLogEntry.setOperationMode(OperationMode.ACTIVE);
        operationLogEntry.setOperationParameter("Новые данные", PublicModelFormatter.format(toUpdateInformation));
        if (bindingResult.hasErrors()) {
            operationLogEntry.setOperationState(OperationState.CLIENT_ERROR);
            writeLog(operationLogEntry);
            throw new BindException(bindingResult);
        }
        try {
            ResponseEntity<Client> responseEntity = delegate.updateClient(toUpdateInformation);
            operationLogEntry.setOperationState(getOperationState(responseEntity));
            return responseEntity;
        } catch (Exception e) {
            operationLogEntry.setOperationState(OperationState.SYSTEM_ERROR);
            throw e;
        } finally {
            writeLog(operationLogEntry);
        }
    }


    private static OperationState getOperationState(ResponseEntity<?> stringResponseEntity) {
        if (stringResponseEntity.getStatusCode().is4xxClientError()) {
            return OperationState.CLIENT_ERROR;
        }
        if (stringResponseEntity.getStatusCode().is5xxServerError()) {
            return OperationState.SYSTEM_ERROR;
        }
        return OperationState.SUCCESS;
    }

    private void writeLog(OperationLogEntry operationLogEntry) {
        operationLogEntry.setDuration(Calendar.getInstance().getTimeInMillis() - operationLogEntry.getLogDate().getTimeInMillis());
        operationLogService.log(operationLogEntry);
    }

    /**
     * Интерфейс эффективной реализации контроллера
     */
    @Order(Ordered.HIGHEST_PRECEDENCE)
    @RestControllerAdvice(assignableTypes = ClientsApi.class)
    public interface Delegate {
        /**
         * Создание нового клиента
         *
         * @param client Данные клиента необходимые для создания 
         * @return Экземпляр класса {@link ResponseEntity}
         * @throws Exception исключение, выбрасываемое в случае ошибок при выполнении метода
         */
        ResponseEntity<Client> createClient(Client client) throws Exception;

        /**
         * Удаление клиента
         *
         * @param clientId Удаление клиента по id 
         * @return Экземпляр класса {@link ResponseEntity}
         * @throws Exception исключение, выбрасываемое в случае ошибок при выполнении метода
         */
        ResponseEntity<String> deleteClients(String clientId) throws Exception;

        /**
         * Получение всех клиентов
         *
         * @param pageable параметры пагинации 
         * @return Экземпляр класса {@link ResponseEntity}
         * @throws Exception исключение, выбрасываемое в случае ошибок при выполнении метода
         */
        ResponseEntity<Page<Client>> getAllClient(Pageable pageable) throws Exception;

        /**
         * Получение клиента по id
         *
         * @param clientId Идентификатор клиента 
         * @return Экземпляр класса {@link ResponseEntity}
         * @throws Exception исключение, выбрасываемое в случае ошибок при выполнении метода
         */
        ResponseEntity<Client> getClientById(String clientId) throws Exception;

        /**
         * Редактирование клиента
         *
         * @param toUpdateInformation Новые данные 
         * @return Экземпляр класса {@link ResponseEntity}
         * @throws Exception исключение, выбрасываемое в случае ошибок при выполнении метода
         */
        ResponseEntity<Client> updateClient(Client toUpdateInformation) throws Exception;
    }
}
